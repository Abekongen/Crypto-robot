import requests
import time
import json

# Replace with your API keys this goes for eth only, if bitcoin and solana comes in write the API under.
ETHERSCAN_API_KEY = ''
WHALES_DATA_API_KEY = 'YOUR_WHALES_DATA_API_KEY'

# Ethereum address (for Ether transactions)
ETHEREUM_ADDRESS = '0x0000000000000000000000000000000000000000'  # Represents ETH

# List of addresses to monitor
WALLET_ADDRESSES = [
    '',
    # Add more valid addresses or remove the empty entry
]

# Function to get transactions from Etherscan
def get_transactions(address):
    url = f'https://api.etherscan.io/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&sort=desc&apikey={ETHERSCAN_API_KEY}'
    response = requests.get(url)
    data = response.json()

    if data['status'] == '1':
        return data['result']
    else:
        print(f"Error fetching transactions for {address}: {data['message']}")
        return []

def send_notification(message):
    webhook_url = ''  # Replace with your actual Slack webhook URL
    payload = {
        "text": message
    }
    retries = 5  # Number of retries for 429 errors
    for attempt in range(retries):
        try:
            response = requests.post(webhook_url, json=payload)
            response.raise_for_status()  # Raise an error for bad responses
            print("Notification sent successfully!")
            return  # Exit the function after a successful send
        except requests.exceptions.HTTPError as e:
            if response.status_code == 429:  # Too Many Requests
                wait_time = 2 ** attempt  # Exponential backoff
                print(f"Rate limited. Retrying in {wait_time} seconds...")
                time.sleep(wait_time)
            else:
                print(f"Failed to send notification: {e}")
                return  # Exit if a different error occurs

def format_transaction_message(address, tx):
    message = (
        f"*Transaction Detected*\n"
        f"Address: `{address}`\n"
        f"Transaction Hash: `{tx['hash']}`\n"
        f"Block Number: `{tx['blockNumber']}`\n"
        f"Timestamp: `{tx['timeStamp']}`\n"
        f"From: `{tx['from']}`\n"
        f"To: `{tx['to']}`\n"
        f"Value: `{tx['value']}` ETH\n"
        f"Gas Used: `{tx['gasUsed']}`\n"
        f"Method: `{tx.get('methodId', 'N/A')}`"  # Use .get() to avoid KeyError
    )
    return message

# Main monitoring loop
def monitor_wallets():
    tracked_transactions = {}

    while True:
        for address in WALLET_ADDRESSES:
            transactions = get_transactions(address)

            for tx in transactions:
                tx_hash = tx['hash']
                # Only notify for Ethereum transactions
                if (tx['to'].lower() == ETHEREUM_ADDRESS.lower() or
                    tx['from'].lower() == ETHEREUM_ADDRESS.lower()):
                    if tx_hash not in tracked_transactions:
                        tracked_transactions[tx_hash] = tx
                        # Notify on buy/sell
                        if tx['to'].lower() == address.lower():  # Case insensitive
                            message = format_transaction_message(address, tx)
                            send_notification(f"Buy detected:\n{message}")
                        elif tx['from'].lower() == address.lower():  # Case insensitive
                            message = format_transaction_message(address, tx)
                            send_notification(f"Sell detected:\n{message}")

            time.sleep(1)  # Wait 1 second between transactions

        time.sleep(60)  # Wait 60 seconds before checking again

if __name__ == "__main__":
    monitor_wallets()
